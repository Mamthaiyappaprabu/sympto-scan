## CODE :
```
# Import necessary libraries
from google.colab import drive
drive.mount('/content/drive')
import os
import random
import pandas as pd
import numpy as np
import cv2
import torch
import torch.nn as nn
import torch.nn.functional as F
from tqdm import tqdm
from torchvision import datasets, transforms, models
from torch.utils.data import random_split, DataLoader
import matplotlib.pyplot as plt

# Data directory
data_dir = '/content/drive/MyDrive/Doodle/The IQ-OTHNCCD lung cancer dataset/The IQ-OTHNCCD lung cancer dataset'

# Categories in the dataset
Name1=['Normal cases', 'Bengin cases', 'Malignant cases']
Name = sorted(Name1)

# Mapping category names to numeric labels
normal_mapping = dict(zip(Name, range(len(Name))))
reverse_mapping = dict(zip(range(len(Name)), Name))

# Load images into dataset
dataset = []
for i in tqdm(range(len(Name))):
    path = os.path.join(data_dir, Name[i])
    for im in os.listdir(path):
        img_path = os.path.join(path, im)
        img1 = cv2.imread(img_path)
        if img1 is None:
            continue
        img2 = cv2.resize(img1, dsize=(224, 224), interpolation=cv2.INTER_CUBIC)
        img3 = img2.astype(np.float32)
        image = torch.from_numpy(img3).permute(2, 0, 1)
        labeli = normal_mapping[Name[i]]
        dataset += [[image, labeli]]

# Function to display an image
def show_image(img, label):
    img2 = img.permute(1, 2, 0).numpy().astype(int)
    plt.imshow(img2)
    plt.title(reverse_mapping[label])
    plt.show()

# Split the dataset into train, validation, and test sets
torch.manual_seed(20)
val_size = len(dataset) // 10
test_size = len(dataset) // 5
train_size = len(dataset) - val_size - test_size
train_ds, val_ds, test_ds = random_split(dataset, [train_size, val_size, test_size])

# DataLoader for batching
batch_size = 32
train_loader = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)
val_loader = DataLoader(val_ds, batch_size, num_workers=2, pin_memory=True)
test_loader = DataLoader(test_ds, batch_size, num_workers=2, pin_memory=True)

# Function to calculate accuracy
def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

# Base model class
class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)
        loss = F.cross_entropy(out, labels)
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)
        loss = F.cross_entropy(out, labels)
        acc = accuracy(out, labels)
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print(f"Epoch [{epoch}], train_loss: {result['train_loss']:.4f}, val_loss: {result['val_loss']:.4f}, val_acc: {result['val_acc']:.4f}")

# Update the model to DenseNet-121
class DenseNetModel(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        self.network = models.densenet121(pretrained=True)
        num_ftrs = self.network.classifier.in_features
        self.network.classifier = nn.Linear(num_ftrs, 3)  # 3 classes (Normal, Benign, Malignant)

    def forward(self, xb):
        return self.network(xb)

# Training and evaluation functions
def evaluate(model, val_loader):
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.Adam):
    history = []
    optimizer = opt_func(model.parameters(), lr)
    for epoch in range(epochs):
        model.train()
        train_losses = []
        for batch in tqdm(train_loader):
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        model.epoch_end(epoch, result)
        history.append(result)
    return history

# Move data and model to GPU if available
def get_default_device():
    return torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

def to_device(data, device):
    if isinstance(data, (list, tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader(DataLoader):
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        return len(self.dl)

device = get_default_device()
train_loader = DeviceDataLoader(train_loader, device)
val_loader = DeviceDataLoader(val_loader, device)
test_loader = DeviceDataLoader(test_loader, device)

# Initialize and train the DenseNet model
model = DenseNetModel().to(device)
epochs = 100
lr = 0.001
history = fit(epochs, lr, model, train_loader, val_loader)

# Evaluate on test set
test_result = evaluate(model, test_loader)
print(f"Test accuracy: {test_result['val_acc']:.4f}")

# Plot the training and validation accuracies and losses
def plot_accuracies(history):
    accuracies = [x['val_acc'] for x in history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title('Validation Accuracy over Epochs')
    plt.show()

def plot_losses(history):
    train_losses = [x.get('train_loss') for x in history]
    val_losses = [x['val_loss'] for x in history]
    plt.plot(train_losses, '-bx')
    plt.plot(val_losses, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['Training', 'Validation'])
    plt.title('Loss over Epochs')
    plt.show()

plot_accuracies(history)
plot_losses(history)
```
